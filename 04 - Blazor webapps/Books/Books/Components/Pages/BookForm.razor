@* 1. routing, imports & metadata *@
@page "/books/form"
@using Models

@* 2. front-end rendering template *@
<h3>BookForm</h3>

@* EditForm is a built-in component: see EditForm @ https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.forms *@
    <EditForm Model="@book" OnValidSubmit="@AddBook"> 

    @* we bind between form input field & instance property *@
    @* using the @bind-Value prop on an input formfield component *@
    <div>
        <label for="title" class="form-label">Title:</label>
        <InputText id="title" class="form-control" @bind-Value="book.Title" />
    </div>

    <div>
        <button class="btn btn-primary" type="submit">Add Book</button>
    </div>

</EditForm>


@* 3. behavioural code *@
@code {

    // I'm going to be using these for the form - populating the book instance with form data, and adding it to the list
    private Book book = new();                   // starter empty Book instance, will be used to submit form data for a book
    private List<Book> books = new List<Book>(); // starter empty book list, will be used to render a table of books

    private void AddBook()  // this method will be used to submit form data & add a book to the list
    {
        books.Add(book);
        book = new();    // after submitting the form (i.e. firing this method),
                         // we reset book to an empty instance so that the form data clears
    }

}